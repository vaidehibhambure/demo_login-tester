"use strict";
exports.__esModule = true;
var parser_1 = require("@babel/parser");
var isDisallowedComponent_1 = require("./isDisallowedComponent");
function transformLocatorJsComponents(babel) {
    // there was some weird caching error when using babel.env() on Vite
    // Vite has NODE_ENV undefined when doing first dev build
    var env = process.env.BABEL_ENV || process.env.NODE_ENV || "development";
    var t = babel.types;
    var fileStorage = null;
    var wrappingComponent = null;
    var lastComponentId = 0;
    var lastExpressionId = 0;
    var lastStyledId = 0;
    var currentWrappingComponentId = null;
    function addExpressionToStorage(expression) {
        if (fileStorage) {
            var id = lastExpressionId;
            fileStorage.expressions[id] = expression;
            lastExpressionId++;
            return id;
        }
        else {
            throw new Error("No fileStorage");
        }
    }
    function addStyledToStorage(styled) {
        if (fileStorage) {
            var id = lastStyledId;
            fileStorage.styledDefinitions[id] = styled;
            lastStyledId++;
            return id;
        }
        else {
            throw new Error("No fileStorage");
        }
    }
    function addComponentToStorage(component) {
        if (fileStorage) {
            var id = lastComponentId;
            fileStorage.components[id] = component;
            lastComponentId++;
            return id;
        }
        else {
            throw new Error("No fileStorage");
        }
    }
    return {
        visitor: {
            Program: {
                // TODO state is any, we should check if the state depends on webpack or what it depends on?
                enter: function (path, state) {
                    var _a, _b;
                    function isLocallyDisallowedComponent(name) {
                        var _a;
                        var opts = ((_a = state === null || state === void 0 ? void 0 : state.opts) === null || _a === void 0 ? void 0 : _a.ignoreComponentNames) || [];
                        return opts.includes(name);
                    }
                    if ((_a = state.opts) === null || _a === void 0 ? void 0 : _a.env) {
                        if (((_b = state.opts) === null || _b === void 0 ? void 0 : _b.env) !== env) {
                            return;
                        }
                    }
                    lastComponentId = 0;
                    lastExpressionId = 0;
                    lastStyledId = 0;
                    if (!(state === null || state === void 0 ? void 0 : state.filename)) {
                        throw new Error("No file name");
                    }
                    if (state.filename.includes("node_modules")) {
                        fileStorage = null;
                    }
                    else {
                        fileStorage = {
                            filePath: state.filename.replace(state.cwd, ""),
                            projectPath: state.cwd,
                            expressions: [],
                            styledDefinitions: [],
                            components: []
                        };
                    }
                    // NEED TO RUN MANUAL TRAVERSE, SO IT MAKE EDITS BEFORE ALL OTHER PLUGINS
                    path.traverse({
                        // TODO add also for arrow function and class components
                        FunctionDeclaration: {
                            enter: function (path, state) {
                                if (!fileStorage) {
                                    return;
                                }
                                if (!path || !path.node || !path.node.id || !path.node.loc) {
                                    return;
                                }
                                var name = path.node.id.name;
                                wrappingComponent = {
                                    name: name,
                                    locString: path.node.loc.start.line + ":" + path.node.loc.start.column,
                                    loc: path.node.loc
                                };
                                currentWrappingComponentId =
                                    addComponentToStorage(wrappingComponent);
                            },
                            exit: function (path, state) {
                                if (!fileStorage) {
                                    return;
                                }
                                if (!path || !path.node || !path.node.id || !path.node.loc) {
                                    return;
                                }
                                var name = path.node.id.name;
                                // Reset wrapping component
                                if (wrappingComponent &&
                                    wrappingComponent.name === name &&
                                    wrappingComponent.locString ===
                                        path.node.loc.start.line + ":" + path.node.loc.start.column) {
                                    wrappingComponent = null;
                                }
                            }
                        },
                        TaggedTemplateExpression: function (path) {
                            if (!fileStorage) {
                                return;
                            }
                            var tag = path.node.tag;
                            if (tag.type === "MemberExpression") {
                                var property = tag.property;
                                var object = tag.object;
                                if (object.type === "Identifier" &&
                                    object.name === "styled" &&
                                    property.type === "Identifier") {
                                    var name_1 = null;
                                    var parent_1 = path.parent;
                                    if (parent_1.type === "VariableDeclarator") {
                                        if (parent_1.id.type === "Identifier") {
                                            name_1 = parent_1.id.name;
                                        }
                                    }
                                    if (path.node.loc) {
                                        var id = addStyledToStorage({
                                            name: name_1,
                                            loc: path.node.loc,
                                            htmlTag: property.name
                                        });
                                        path.node.tag = t.callExpression(t.memberExpression(tag, t.identifier("attrs")), [
                                            t.arrowFunctionExpression([], t.objectExpression([
                                                t.objectProperty(t.stringLiteral("data-locatorjs-styled"), t.stringLiteral(createDataId(fileStorage, id))),
                                            ])),
                                        ]);
                                    }
                                }
                            }
                        },
                        JSXElement: function (path) {
                            if (!fileStorage) {
                                return;
                            }
                            function getName(el) {
                                if (el.type === "JSXIdentifier") {
                                    return el.name;
                                }
                                else if (el.type === "JSXMemberExpression") {
                                    return getName(el.object) + "." + el.property.name;
                                }
                                else if (el.type === "JSXNamespacedName") {
                                    return el.namespace.name + "." + el.name.name;
                                }
                                return "";
                            }
                            var name = getName(path.node.openingElement.name);
                            if (name &&
                                !(0, isDisallowedComponent_1.isDisallowedComponent)(name) &&
                                !isLocallyDisallowedComponent(name)) {
                                if (path.node.loc) {
                                    var id = addExpressionToStorage({
                                        name: name,
                                        loc: path.node.loc,
                                        wrappingComponentId: currentWrappingComponentId
                                    });
                                    var newAttr = t.jSXAttribute(t.jSXIdentifier("data-locatorjs-id"), t.jSXExpressionContainer(t.stringLiteral(
                                    // this is stored by projectPath+filePath because that's the only unique identifier
                                    createDataId(fileStorage, id))
                                    // t.ObjectExpression([
                                    // ])
                                    ));
                                    path.node.openingElement.attributes.push(newAttr);
                                }
                            }
                        }
                    });
                },
                exit: function (path, state) {
                    var _a;
                    if ((_a = state.opts) === null || _a === void 0 ? void 0 : _a.env) {
                        if (state.opts.env !== env) {
                            return;
                        }
                    }
                    if (!fileStorage) {
                        return;
                    }
                    var dataCode = JSON.stringify(fileStorage);
                    var dataAst = (0, parser_1.parseExpression)(dataCode, {
                        sourceType: "script"
                    });
                    var insertCode = "(() => {\n            if (typeof window !== \"undefined\") {\n              window.__LOCATOR_DATA__ = window.__LOCATOR_DATA__ || {};\n              window.__LOCATOR_DATA__[\"".concat(createFullPath(fileStorage), "\"] = ").concat(dataCode, ";\n            }\n          })()");
                    // `function __bindLocatorExpression(id) {
                    //   return require("@locator/runtime").__bindLocatorExpression(${createFullPath(
                    //     fileStorage
                    //   )}, id);
                    // }`;
                    var insertAst = (0, parser_1.parseExpression)(insertCode, {
                        sourceType: "script"
                    });
                    path.node.body.push(t.expressionStatement(insertAst));
                }
            }
        }
    };
}
exports["default"] = transformLocatorJsComponents;
function createDataId(fileStorage, id) {
    return createFullPath(fileStorage) + "::" + String(id);
}
function createFullPath(fileStorage) {
    return fileStorage.projectPath + fileStorage.filePath;
}

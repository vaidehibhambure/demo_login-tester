import { template as _$template } from "solid-js/web";
import { delegateEvents as _$delegateEvents } from "solid-js/web";
import { setAttribute as _$setAttribute } from "solid-js/web";
import { className as _$className } from "solid-js/web";
import { effect as _$effect } from "solid-js/web";
import { insert as _$insert } from "solid-js/web";
import { createComponent as _$createComponent } from "solid-js/web";
import { use as _$use } from "solid-js/web";
const _tmpl$ = /*#__PURE__*/_$template(`<div tabindex="0"><div><div class="bg-white rounded-md py-2 shadow-xl text-xs overflow-auto flex flex-col">`),
  _tmpl$2 = /*#__PURE__*/_$template(`<a><div class="text-xs text-gray-500">`);
import { For, createSignal, onMount } from "solid-js";
import { getParentsPaths } from "../adapters/getParentsPath";
import getUsableFileName from "../functions/getUsableFileName";
import { buildLink } from "../functions/buildLink";
import { useOptions } from "../functions/optionsStore";
import { goToLinkProps } from "../functions/goTo";
export function ContextView(props) {
  const options = useOptions();
  let contentRef;
  let list;
  let root;
  onMount(() => {
    if (root) {
      root.focus();
    }
  });
  const [focusedIndex, setFocusedIndex] = createSignal(null);
  const paths = () => getParentsPaths(props.contextMenuState.target, props.adapterId);
  function focusOnElementInDirection(direction) {
    if (focusedIndex == null) {
      setFocusedIndex(0);
      return;
    }
    let newFocused = focusedIndex() ?? -1;
    if (direction === "down") {
      newFocused += 1;
    }
    if (direction === "up") {
      newFocused -= 1;
    }
    if (newFocused < 0) {
      newFocused = paths().length - 1;
    }
    if (newFocused > paths().length - 1) {
      newFocused = 0;
    }
    setFocusedIndex(newFocused);
    window.setTimeout(() => {
      scrollActiveOptionIntoView();
    }, 0);
  }
  function scrollActiveOptionIntoView() {
    if (focusedIndex == null) {
      return;
    }
    list?.querySelector(`:nth-child(${(focusedIndex() || 0) + 1})`)?.scrollIntoView({
      block: "nearest"
    });
  }
  function handleKeyDown(e) {
    switch (e.key) {
      case "Escape":
        {
          e.preventDefault();
          e.stopPropagation();
          props.close();
          break;
        }
      case "ArrowDown":
        {
          e.preventDefault();
          focusOnElementInDirection("down");
          break;
        }
      case "ArrowUp":
        {
          e.preventDefault();
          focusOnElementInDirection("up");
          break;
        }
      case "Enter":
      case " ":
        {
          e.preventDefault();
          if (focusedIndex() !== null) {
            const path = paths()[focusedIndex()];
            if (path) {
              goToLinkProps(path.link, props.targets, options);
            }
            setFocusedIndex(null);
          }
          props.close();
          break;
        }
    }
  }
  return (() => {
    const _el$ = _tmpl$(),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.firstChild;
    _el$.$$keydown = handleKeyDown;
    _el$.$$click = e => {
      if (e.currentTarget === e.target) {
        props.close();
      }
    };
    const _ref$ = root;
    typeof _ref$ === "function" ? _$use(_ref$, _el$) : root = _el$;
    _el$.style.setProperty("position", "fixed");
    _el$.style.setProperty("top", "0");
    _el$.style.setProperty("left", "0");
    _el$.style.setProperty("width", "100vw");
    _el$.style.setProperty("height", "100vh");
    _el$.style.setProperty("pointer-events", "auto");
    _el$.style.setProperty("background-color", "rgba(0,0,0,0.1)");
    _el$.style.setProperty("z-index", "1001");
    const _ref$2 = contentRef;
    typeof _ref$2 === "function" ? _$use(_ref$2, _el$2) : contentRef = _el$2;
    _el$2.style.setProperty("position", "absolute");
    const _ref$3 = list;
    typeof _ref$3 === "function" ? _$use(_ref$3, _el$3) : list = _el$3;
    _el$3.style.setProperty("max-height", "calc(100vh - 16px)");
    _$insert(_el$3, _$createComponent(For, {
      get each() {
        return paths();
      },
      children: (path, index) => {
        return (() => {
          const _el$4 = _tmpl$2(),
            _el$5 = _el$4.firstChild;
          _el$4.$$click = e => {
            e.preventDefault();
            e.stopPropagation();
            goToLinkProps(path.link, props.targets, options);
            props.close();
          };
          _$insert(_el$4, () => path.title, _el$5);
          _$insert(_el$5, () => getUsableFileName(path.link?.filePath || ""));
          _$effect(_p$ => {
            const _v$3 = "px-4 py-2 w-60 hover:bg-slate-50 text-left text-sm font-medium " + (index() === focusedIndex() ? "bg-slate-100" : ""),
              _v$4 = buildLink(path.link, props.targets, options);
            _v$3 !== _p$._v$3 && _$className(_el$4, _p$._v$3 = _v$3);
            _v$4 !== _p$._v$4 && _$setAttribute(_el$4, "href", _p$._v$4 = _v$4);
            return _p$;
          }, {
            _v$3: undefined,
            _v$4: undefined
          });
          return _el$4;
        })();
      }
    }));
    _$effect(_p$ => {
      const _v$ = `${props.contextMenuState.y || 0}px`,
        _v$2 = `${props.contextMenuState.x || 0}px`;
      _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$2.style.setProperty("top", _v$) : _el$2.style.removeProperty("top"));
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$2.style.setProperty("left", _v$2) : _el$2.style.removeProperty("left"));
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined
    });
    return _el$;
  })();
}
_$delegateEvents(["click", "keydown"]);
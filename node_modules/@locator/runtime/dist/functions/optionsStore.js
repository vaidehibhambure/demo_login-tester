import { createComponent as _$createComponent } from "solid-js/web";
import { createContext, createSignal, useContext } from "solid-js";
import { getStoredOptions, listenOnOptionsChanges, setStoredOptions } from "@locator/shared";
export function initOptions() {
  const [signalOptions, setSignalOptions] = createSignal(getStoredOptions());

  // This listens on localStorage changes, but the changes go only from scripts other than the current one and current one's content scripts
  listenOnOptionsChanges(newOptions => {
    setSignalOptions(newOptions);
  });

  // This listens only on changes from the contents script for this current page
  window.addEventListener("message", event => {
    // We only accept messages from ourselves
    if (event.source != window) {
      return;
    }
    if (event.data.type && event.data.type == "LOCATOR_EXTENSION_UPDATED_OPTIONS") {
      setSignalOptions(getStoredOptions());
    }
  }, false);
  function setOptions(newOptions) {
    const savedOptions = getStoredOptions();
    const optionsToSave = {
      ...savedOptions,
      ...newOptions
    };
    setStoredOptions(optionsToSave);
    setSignalOptions(optionsToSave);
  }

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  window.enableLocator = () => {
    setOptions({
      disabled: false
    });
    return "Locator enabled";
  };
  return {
    setOptions,
    getOptions: signalOptions
  };
}
const OptionsContext = createContext();
export function OptionsProvider(props) {
  const options = initOptions();
  return _$createComponent(OptionsContext.Provider, {
    value: options,
    get children() {
      return props.children;
    }
  });
}
export function useOptions() {
  const options = useContext(OptionsContext);
  if (!options) {
    throw new Error("Options context is not provided");
  }
  return options;
}
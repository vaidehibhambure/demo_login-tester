import { CountryData, CountryGuessResult, CountryIso2, ParsedCountry, RequiredType } from '../types';
interface HandleValueChangeFuncOptions {
    deletion?: 'forward' | 'backward' | undefined;
    inserted?: boolean;
    cursorPosition?: number;
    insertDialCodeOnEmpty?: boolean;
    forcedCountry?: ParsedCountry;
}
export declare const MASK_CHAR = ".";
export interface UsePhoneConfig {
    /**
     * @description Prefix for phone value.
     * @default "+"
     */
    prefix?: string;
    /**
     * @description This mask will apply on countries that does not have specified mask.
     * @default "............" // 12 chars
     */
    defaultMask?: string;
    /**
     * @description Char that renders after dial code
     * @default " "
     */
    charAfterDialCode?: string;
    /**
     * @description
     * Save value to history if there were not any changes in provided milliseconds timeslot.
     * Undo/redo (ctrl+z/ctrl+shift+z) works only with values that are saved in history.
     * @default 200
     */
    historySaveDebounceMS?: number;
    /**
     * @description Disable country guess on value change.
     * @ignore
     * *onCountryGuess* callback would not be called
     * @default false
     */
    disableCountryGuess?: boolean;
    /**
     * @description
     * Disable dial code prefill on initialization.
     * Dial code prefill works only when "empty" phone value have been provided.
     * @default false
     */
    disableDialCodePrefill?: boolean;
    /**
     * @description
     * Always display the dial code.
     * Dial code can't be removed/changed by keyboard events, but it can be changed by pasting another country phone value.
     * @default false
     */
    forceDialCode?: boolean;
    /**
     * @description Phone value will not include passed *dialCode* and *prefix* if set to *true*.
     * @ignore
     * - *disableCountryGuess* value will be ignored and set to *true*.
     * - *forceDialCode* value will be ignored and set to *false*.
     * @default false
     */
    disableDialCodeAndPrefix?: boolean;
    /**
     * @description Selected country (iso2)
     * @default undefined
     */
    country?: CountryIso2;
    /**
     * @description Array of available countries for guessing
     * @default defaultCountries // full country list
     */
    countries?: CountryData[];
    /**
     * @description Callback that calls on country guess
     * @param data country guess result (includes *country*, *fullDialCodeMatch* and *areaCodeMatch*)
     * @default undefined
     */
    onCountryGuess?: (data: RequiredType<CountryGuessResult>) => void;
    /**
     * @description Callback that calls on phone update (helpful for cursor handling)
     * @param phone new phone value
     * @param metadata helpful data for handling update
     * @default undefined
     */
    onPhoneUpdate?: (phone: string, metadata: {
        formatCountry: ParsedCountry | undefined;
        unformattedValue: string;
        cursorPosition: number;
        deletion: HandleValueChangeFuncOptions['deletion'];
    }) => void;
}
export declare const defaultPhoneConfig: Required<Omit<UsePhoneConfig, 'inputRef' | 'country' | 'onCountryGuess' | 'onPhoneUpdate'>>;
export declare const usePhone: (value: string, config?: UsePhoneConfig) => {
    phone: string;
    initialized: boolean;
    undo: () => boolean;
    redo: () => boolean;
    handleValueChange: (newPhone: string, { deletion, cursorPosition, insertDialCodeOnEmpty, inserted, forcedCountry, }?: HandleValueChangeFuncOptions) => string;
};
export {};
